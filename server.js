const express = require('express')
const app = express();
const validUrl = require('valid-url')
const mongo = require('mongodb').MongoClient;

// Function that takes a URL and returns an ID
// ID is generated by adding up all charCode of all characters in URL.
const generateID = (url) => {
    return url.split('').map((x) => {return x.charCodeAt(0)}).reduce((a,b) => {return a+b})
}

// Storing data in MongoDB - have a collection of objects where each object is a URL/ID pair
// e.g. { 'url': 'http://www.google.com', 'id':2871 }

app.get(/new\/(.+)/, function(req,res) {
    var returnObject = {};
    var url = req.params[0];
    if(!validUrl.isUri(url)) {
        returnObject = "Error, not a valid URL."
    } else {
        // Connect to Mongo
        mongo.connect('mongodb://localhost:27017/fcc', function(err, db){
            // Handle error
            if(err) throw err;
            // Search url in database to see if it exists
            db.collection('urlshortener').find( { url: url } ).toArray((err, data) => {
                if(err) throw err;
                if(data.length === 1) {
                    returnObject = data[0]
                    db.close()
                    res.send(returnObject);
                } else {
                    returnObject = { url: url, _id: generateID(url) }
                    db.collection('urlshortener').insert(returnObject, () => {
                        db.close(); 
                        res.send(returnObject);
                    });
                }
            })            
        })
        
    }
})

app.get('/:id', function(req, res) {
    var id = req.params.id;
    // Look up id in database
    mongo.connect('mongodb://localhost:27017/fcc', (err,db) => {
        db.collection('urlshortener').find( { _id: parseInt(id) } ).toArray( (err,data) => {
            if(err) throw err;
            // If ID matches, direct user to website
            if(data.length === 1){
                res.redirect(data[0].url)
                db.close();
            } else {
                res.send('Error, no website exists for that ID')
                db.close();
            }
        })
    }
)})

app.listen(8080, console.log('Listening on port 8080'))